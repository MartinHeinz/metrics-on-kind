# kubectl set resources deployment resource-consumer --requests=cpu=500m,memory=256Mi  # From setup script
# kubectl autoscale deploy resource-consumer --min=1 --max=5 --cpu-percent=75 -o yaml --dry-run=client
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: resource-consumer
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: resource-consumer
  targetCPUUtilizationPercentage: 75
---
# kubectl run curl --image=curlimages/curl:7.83.1 --rm -it --restart=Never -- curl --data "megabytes=500&durationSec=600" http://resource-consumer:8080/ConsumeMem
# kubectl get hpa
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: resource-consumer-v2
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: resource-consumer
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: AverageValue
        averageValue: 200Mi
---
# kubectl get hpa resource-consumer-v2-custom -o json | jq .status.conditions
# Verify that `ValidMetricFound` is in status

# Test - kubectl run curl --image=curlimages/curl:7.83.1 --rm -it --restart=Never -- curl --data "metric=custom_metric&delta=100&durationSec=600" http://resource-consumer:8080/BumpMetric
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: resource-consumer-v2-custom
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: resource-consumer
  minReplicas: 1
  maxReplicas: 5
  metrics:
  # kubectl get --raw "/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/*/custom_metric" | jq .
  - type: Pods
    pods:
      metric:
        name: custom_metric
      target:
        type: AverageValue
        averageValue: 100
  # kubectl get --raw "/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/services/resource-consumer/custom_metric" | jq .
---
# kubectl run curl --image=curlimages/curl:7.83.1 --rm -it --restart=Never -- curl --data "metric=external_queue_messages_ready&delta=150&durationSec=600" http://resource-consumer:8080/BumpMetric
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: resource-consumer-v2-external
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: resource-consumer
  minReplicas: 1
  maxReplicas: 5
  metrics:
  # kubectl get --raw /apis/external.metrics.k8s.io/v1beta1/namespaces/default/external_queue_messages_ready | jq .
  - type: External
    external:
      metric:
        name: external_queue_messages_ready
      target:
        type: Value
        value: 100
---
# HPAScaleToZero
# kubectl patch hpa resource-consumer-v2-external -p '{"spec":{"minReplicas": 0}}'
---
# kubectl run curl --image=curlimages/curl:7.83.1 --rm -it --restart=Never -- curl --data "millicores=500&durationSec=600" http://resource-consumer:8080/ConsumeCPU
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: resource-consumer-v2-container
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: resource-consumer
  minReplicas: 1
  maxReplicas: 5
  metrics:
  #  kubectl get --raw "/apis/metrics.k8s.io/v1beta1/namespaces/default/pods/$(kubectl get pod -l app=resource-consumer -o jsonpath="{.items[0].metadata.name}")" | jq .
  - type: ContainerResource
    containerResource:
      name: cpu
      container: resource-consumer
      target:
        type: Utilization
        averageUtilization: 75
